---
import Dialog from "./Dialog.astro";
---

<!-- <script is:inline src="https://cdn.jsdelivr.net/npm/exifr/dist/full.umd.js"></script> -->
<script is:inline src="/exifr.js"></script>

<Dialog id="uploadImage" buttonLabel="UPLOAD" title="upload an image">
  <form id="image-form" class="grid grid-cols-2 gap-16">
    <label
      for="image"
      class="w-full h-full border border-slate-500 border-dashed rounded-2xl p-2 pt-14 text-center cursor-s-resize md:min-h-[664px] md:w-[669px]"
    >
      <img
        id="imagePreview"
        src="/img/drop.svg"
        alt="drop an image file"
        class="mx-auto"
      />
      <p class="mt-4">Drag and drop an image, or Browse</p>
      <p class="text-slate-400 text-xs mt-2">Minimum 512px width, max 10MB</p>
      <div class="flex items-center gap-4 mx-auto"><input type="text" name="width" id="width"> x <input type="text" name="height" id="height"></div>
      <input
        type="file"
        id="image"
        name="image"
        accept="image/png, image/jpeg"
        class="hidden"
      />
    </label>
    <div class="flex flex-col gap-3">
      <label for="prompt"
        >Prompt
        <textarea name="prompt" id="prompt" cols="30" rows="5"></textarea>
      </label>
      <label for="negative_prompt"
        >Negative prompt
        <textarea name="negative_prompt" id="negative_prompt" cols="30" rows="5"
        ></textarea>
      </label>
      <label for="generator"
        >What generator did you use to generate this image?
        <select name="generator" id="generator">
          <option value="midjourney">midjourney</option>
          <option value="Automatic111">Automatic111</option>
          <option value="invoke-ai/InvokeAI">Invoke</option>
          <option value="DiffusionBee">DiffusionBee</option>
          <option value="Mochi">Mochi</option>
          <option value="Other">Other</option>
        </select>
      </label>
      <label for="model">
        What model did you use to generate this image?
        <input type="text" name="model" id="model" />
      </label>
      <label for="seed">
        Seed (optional)
        <input type="number" name="seed" id="seed" />
      </label>
      <label for="cfg_scale">
        Cfg scale (optional)
        <input type="number" name="cfg_scale" id="cfg_scale" />
      </label>
      <label for="steps">
        Steps (optional)
        <input type="number" name="steps" id="steps" />
      </label>
      <button
        type="submit"
        class="mt-4 text-white text-center p-3 rounded-3xl text-sm"
        style="background-color: var(--color-primary);">PUBLISH NOW</button
      >
    </div>
  </form>
</Dialog>

<script>
  import convertAutomatic111Metadata from "../assets/js/convertAutomatic111Metadata.js";
  import convertInvokeMetadata from "../assets/js/convertInvokeMetadata.js";
  import convertMochiMetadata from "../assets/js/convertMochiMetadata.js";
  import { ImageObject } from "../assets/types/ImageObject.js";

  class ImageMetadataForm {
    constructor(
      private formId: string,
      private imagePreviewId: string,
      private imageInputId: string
    ) {
      this.init();
    }

    private async init() {
      const form = document.getElementById(this.formId) as HTMLFormElement;
      form.addEventListener("submit", this.handleSubmit.bind(this));

      const imageInput = form.querySelector(
        'input[type="file"]'
      ) as HTMLInputElement;
      imageInput.addEventListener("change", this.previewImage.bind(this));
    }

    private previewImage() {
      const imagePreview = document.getElementById(
        this.imagePreviewId
      ) as HTMLImageElement;
      const imageInput = document.getElementById(
        this.imageInputId
      ) as HTMLInputElement;

      if (!imageInput.files || imageInput.files.length === 0) return;

      const imageFile = imageInput.files[0];
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target) return;

        imagePreview.src = e.target.result as string;
        this.updateFormFields(imageFile);
      };
      reader.readAsDataURL(imageFile);
    }

    private async updateFormFields(imageFile: File) {
      let objectImageDatas: ImageObject = {} as ImageObject;
      try {
        const metadata = await exifr.parse(imageFile, {
          tiff: false,
          xmp: true,
        });

        if (metadata) {
          console.log("metadata", metadata);
          if (metadata["sd-metadata"]) {
            console.log("INVOKE");
            const jsObject = JSON.parse(metadata["sd-metadata"]);
            objectImageDatas = convertInvokeMetadata(jsObject);
            console.log("objectImageDatas RETOURNE", objectImageDatas);
            this.fillForm(objectImageDatas);
          }
          if (metadata["description"]) {
            console.log("MOCHI");
            objectImageDatas = convertMochiMetadata(metadata["description"]);
            console.log("objectImageDatas", objectImageDatas);
          }
          if (metadata["parameters"]) {
            console.log("AUTOMATIC111");
            objectImageDatas = convertAutomatic111Metadata(
              metadata["parameters"]
            );
            console.log("objectImageDatas", objectImageDatas);
          }
        }
      } catch (error) {
        console.error("Failed to read metadata:", error);
      }
    }

    private fillForm(data: ImageObject) {
      const form = document.querySelector("#image-form") as HTMLFormElement;

      for (const key in data) {
        const element = form.querySelector(`[name="${key}"]`) as
          | HTMLInputElement
          | HTMLTextAreaElement
          | HTMLSelectElement
          | null;
        if (element) {
          element.value = data[key];
        }
      }
    }

    private resetForm() {
      const form = document.querySelector("#image-form") as HTMLFormElement;
      form.reset();
    }

    private async handleSubmit(event: Event) {
      event.preventDefault();

      const form = event.target as HTMLFormElement;

      const BEARER_TOKEN =
        "eaaee52512d5885e2f301c3d39b314eda624605e6c94e190c5a21a28dd4a5065f5a652940320ae8a19c2ad4499bcf54d86c931f83dbff7c57c26fd0c3b920bf7b5dfaa9eea973c8863b2070d33e46582ed88c6266aa57243583a95564ae3465009362aec750c1aa6df841e4e3edb9db6c337474d4f5bb44514728f2db06485bf";
      const API_URL = "http://localhost:1337/api/images";

      const data = {};
      const formData = new FormData();

      Array.from(form.elements).forEach(({ name, type, value, files }) => {
        if (!["submit", "file"].includes(type)) {
          data[name] = value;
        } else if (type === "file") {
          console.log('LA files', files);
          Array.from(files).forEach((file) => {
            console.log("file", file);
            formData.append(`files.${name}`, file, file.name);
          });
        }
      });

      formData.append("data", JSON.stringify(data));

      try {
        const response = await fetch(API_URL, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${BEARER_TOKEN}`,
          },
          body: formData,
        });

        if (response.ok) {
          console.log("Data submitted successfully");
          this.resetForm();
          // ??NOTE : Ajouter un gallery MiniMasonry.layout() et un reloqd des datas et un close de la modal + u message de succes dans la modale
        } else {
          console.error("Failed to submit data:", response.statusText);
        }
      } catch (error) {
        console.error("Failed to submit data:", error);
      }
    }
  }

  const imageMetadataForm = new ImageMetadataForm(
    "image-form",
    "imagePreview",
    "image"
  );
</script>
