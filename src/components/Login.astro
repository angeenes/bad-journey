---
import Dialog from '../components/Dialog.astro'
---
 <button id="openModalButton" class="uppercase mr-5 font-semibold"> 
  <!-- <img id="profile-picture" src="" alt="profile picture" class="hidden"> -->
  Account
</button>

<a href="/account" class="flex">
  <button id="btnConnected" class="uppercase mr-5 rounded-full bg-pink-400 min-w-fit px-3" style="display: none;">

  </button>
</a>

  <Dialog id="loginDialog" title="LOGIN">
    <form id="loginForm">
      <input type="email" id="email" name="email" placeholder="Email" autocomplete="username"><br><br>
      <input type="password" id="password" name="password" placeholder="Password" autocomplete="current-password"><br><br>
      <button type="submit">Log in</button>
    </form>
    <a href="https://hammerhead-app-377qb.ondigitalocean.app/api/connect/google">Connect with Google</a>
    <p id="error" style="color: red; display: none;">Invalid email or password</p>
    <p id="username" style="display: none;"></p>
  </Dialog>
  
  <script>

import { User, UserObject } from "../assets/types/userObject";
import { API_URL } from "../consts";

    const openModalButton = document.getElementById('openModalButton');
    const btnConnected = document.getElementById('btnConnected');
    const loginDialog: HTMLDialogElement = document.getElementById('loginDialog') as HTMLDialogElement;
    if (typeof HTMLDialogElement !== 'undefined' && loginDialog instanceof HTMLDialogElement && openModalButton instanceof HTMLButtonElement) {
      openModalButton.addEventListener('click', () => {
        loginDialog.showModal();
      });
      if(loginDialog) {
        loginDialog?.querySelector('button:not([type="submit"])').addEventListener('click', () => {
        loginDialog.close();
      });
      }

    }


    class Authenticator {
      private readonly url: string;

      constructor(url) {
        this.url = url;
      }

      authenticate(email, password) {
        return fetch(this.url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                identifier: email,
                password: password
            })
        })
        .then(function(response) {
            if (response.ok) {
              return response.json();
            } else {
              throw new Error('Network response was not ok');
            }
        })
        .then(function(data: UserObject) {

            const jwt = data.jwt;
            const user = data.user;

            console.log('User profile', user);
            console.log('User token', jwt);

            const errorElement = document.getElementById('error');
            if(errorElement){
              errorElement.style.display = 'none';
            }

            const usernameElement = document.getElementById('username');
            if(usernameElement){
              usernameElement.textContent = 'Welcome, ' + user.username;
              usernameElement.style.display = 'block';
            }

            localStorage.setItem('jwt', jwt);
            localStorage.setItem('user', JSON.stringify(user));

            this.allowAccess();

        })
        .catch(function(error) {
            console.log('An error occurred:', error);

            const errorElement = document.getElementById('error');
            if(errorElement){
              errorElement.style.display = 'block';
            }
        });
      }

      allowAccess() {
        const jwt = localStorage.getItem('jwt');
        const user = localStorage.getItem('user');
        const openModalButton = document.getElementById('openModalButton');
        const profilePicutre: HTMLImageElement = document.getElementById('profile-picture') as HTMLImageElement;
        if (jwt && user && openModalButton && btnConnected) {
          const userJSON: User = JSON.parse(user);
          const userInitials = userJSON.username.split(' ').map((n) => n[0]).join('');
          openModalButton.style.display = 'none';
          btnConnected.style.display = 'block';
          btnConnected.innerHTML = userInitials;
          if(profilePicutre){
            // profilePicutre.src = userJSON.profilePicture.url;
          }
          loginDialog.close();
          return true;
        } else {
          return false;
        }
      }
    }

    class LoginForm {
      constructor(authenticator) {
        this.form = document.getElementById('loginForm');
        this.emailInput = document.getElementById('email');
        this.passwordInput = document.getElementById('password');
        this.authenticator = authenticator;
      }

      submitLoginForm(event) {
        event.preventDefault();

        const email = this.emailInput.value;
        const password = this.passwordInput.value;

        this.authenticator.authenticate(email, password);
      }

      setupEventListeners() {
        this.form.addEventListener('submit', this.submitLoginForm.bind(this));
      }
    }

    const authenticator = new Authenticator(`${API_URL}auth/local`);
    const loginForm = new LoginForm(authenticator);
    loginForm.setupEventListeners();

    // document.addEventListener('DOMContentLoaded', () => {
      // if (!authenticator.allowAccess()) {
        // loginDialog.showModal();
      // }
      authenticator.allowAccess();
    // });

  </script>