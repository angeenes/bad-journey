---
import Dialog from "./Dialog.astro";
---

<section class="container-full">
  <!-- grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-6 -->
  <article id="gallery" class="columns-3xs gap-0"></article>
  <div id="load-more" class="text-center">Loading...</div>
</section>

<Dialog id="img-dialog" title="infos">
  <p id="image-dialog-text"></p>
</Dialog>

<script>

  class Gallery {
    url: string;
    currentPage: number;
    itemsPerPage: number;
    loading: boolean;
    apiToken: string;

    constructor() {
      this.url = "http://localhost:1337";
      this.currentPage = 1;
      this.itemsPerPage = 5;
      this.loading = false;
      this.apiToken =
        "eaaee52512d5885e2f301c3d39b314eda624605e6c94e190c5a21a28dd4a5065f5a652940320ae8a19c2ad4499bcf54d86c931f83dbff7c57c26fd0c3b920bf7b5dfaa9eea973c8863b2070d33e46582ed88c6266aa57243583a95564ae3465009362aec750c1aa6df841e4e3edb9db6c337474d4f5bb44514728f2db06485bf";
      this.init();
    }

    async fetchData(page) {
      const endpoint = `${this.url}/api/images?populate=*&pagination[page]=${page}&pagination[pageSize]=${this.itemsPerPage}`;
      const headers = {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiToken}`,
      };

      const response = await fetch(endpoint, { headers });
      return await response.json();
    }

    createCardTemplate(item, index) {
      const {
        attributes: {
          image: {
            data: {
              attributes: {
                formats: { medium },
              },
            },
          },
        },
      } = item;
      return `
    <div class="card">
      <img width="320px" height="100%"
        src="${this.url + medium.url}"
        alt="Image for post ${item.attributes.file_name}"
        loading="lazy" class="w-full card-img"
        style="transition-delay : ${index * 250}ms"
        >
    </div>
  `;
    }

    createDialogImageTemplate(item) {
      const {
        attributes: {
          image: {
            data: {
              attributes: {
                formats: { medium },
              },
            },
          },
        },
      } = item;
      return `
    <div class="flex">
      <div>
        <p>File name: ${item.attributes.file_name}</p>
        <p>File size: ${item.attributes.file_size}</p>
        <p>File type: ${item.attributes.file_type}</p>
        <p>File url: ${item.attributes.url}</p>
      </div>
      <img width="320px" height="100%"
        src="${this.url + medium.url}"
        data-src="${this.url + medium.url}"
        alt="Image for post ${item.attributes.file_name}"
        loading="lazy" class="min-h-[160px]"
        >
    </div>
  `;
    }

    renderCards(data) {
      const cardContainer = document.getElementById("gallery");
      const imageDialogText = document.getElementById('image-dialog-text');

      if (cardContainer) {
        data.data.forEach((item, index) => {
          if (
            item.attributes.image.data.attributes.formats.medium?.width &&
            item.attributes.image.data.attributes.formats.medium?.height
          ) {
            const cardTemplate = this.createCardTemplate(item, index);
            setInterval(() => {
              cardContainer.querySelectorAll('img').forEach((img) => {
                img.classList.add('is-visible');
              })
            }, 250);
            cardContainer.insertAdjacentHTML("beforeend", cardTemplate);
            cardContainer?.lastElementChild?.querySelector('img')?.addEventListener('click', () => {
              if(imageDialogText){
                const dialogTemplate = this.createDialogImageTemplate(item);
                imageDialogText.innerHTML = '';
                imageDialogText.insertAdjacentHTML('beforeend', dialogTemplate);
                // imageDialogText.textContent = 'You clicked on the image for post: ' + item.attributes.file_name;
              }
              openDialogId('img-dialog');
            })
          }
        });
      }
    }


    setupInfiniteScroll() {
      const loadMoreElement = document.getElementById("load-more");
      const loadMoreObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(async (entry) => {
          if (entry.isIntersecting && !this.loading && loadMoreElement) {
            this.loading = true;
            observer.unobserve(loadMoreElement);
            this.currentPage++;
            const newData = await this.fetchData(this.currentPage);
            this.renderCards(newData);
            // this.observeImages();

            let totalLoaded = this.currentPage * this.itemsPerPage;

            if (totalLoaded < newData.meta.pagination.total) {
              observer.observe(loadMoreElement);
            } else {
              const endOfResultsMessage = document.createElement("p");
              endOfResultsMessage.className = 'text-center text-white'
              endOfResultsMessage.textContent =
                "-- You have reached the end of the results --";
                if (loadMoreElement.parentNode) {
                  loadMoreElement.parentNode.insertBefore(
                    endOfResultsMessage,
                    loadMoreElement
                  );
                }
              loadMoreElement.style.display = "none";
            }
            this.loading = false;
          }
        });
      });

      if (loadMoreElement) {
        loadMoreObserver.observe(loadMoreElement);
      }
    }

    async init() {
      const initialData = await this.fetchData(this.currentPage);
      this.renderCards(initialData);
      this.setupInfiniteScroll();
    }
  }

  const gallery = new Gallery();
</script>

<style>
.card-img {
  opacity: 0;
  transition: opacity 0.25s ease-in-out;
}
.card-img.is-visible {
  opacity: 1;
}

</style>
