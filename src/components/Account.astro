---
---

<section class="h-48 w-full overflow-hidden mt-16">
  <img
    src="https://hammerhead-app-377qb.ondigitalocean.app/uploads/small_00029_161308978_d8d29dff05.webp"
    alt="account background"
    class="top-0 left-0 w-full object-cover"
  />
</section>

<article
  class="bg-white dark:bg-primary flex flex-col justify-center items-center text-primary dark:text-white w-full mt-11 p-4"
>
  <article class="flex justify-between w-full -mt-36">
    <section id="account"></section>

    <section>
      <button
        class="bg-gradient-pink px-6 py-1 rounded-full uppercase font-bold text-sm h-7 text-white"
        >EDIT PROFIL</button
      >
      <button
        class="bg-gradient-pink px-6 py-1 rounded-full uppercase font-bold text-sm h-7 text-white"
        >UPLOAD A NEW IMAGE</button
      >
    </section>
  </article>

  <section class="flex mt-3 gap-x-5">
    <button id="btnDisconnect">Disconnect</button>
    <button id="btnDelete">Delete account</button>
  </section>
  <section class="flex justify-center items-center gap-x-3 mt-4 cursor-pointer">
    <div class="active text-pink-500 text-bold">35 prompts</div>
    <div class="text-gray">35 private prompts</div>
    <div class="text-gray">67 favorites</div>
    <div class="text-gray">32 likes</div>
    <div class="text-gray">32 people liked your images</div>
  </section>
</article>
<hr class="bg-pink-500 w-full mb-3 h-[2px]" />

<script>
  import { API_URL, IMAGES_URL } from "src/consts";
  import { Avatar, User } from "../assets/types/userObject";

  class Account {
    private user: User;
    public accountEl: HTMLElement;
    public btnDisconnect: HTMLButtonElement;

    constructor() {
      this.user = {
        id: 0,
        username: "",
        email: "",
        provider: "",
        confirmed: false,
        blocked: true,
        createdAt: "",
        updatedAt: "",
        avatar: {} as Avatar,
      };
      this.accountEl = document.getElementById("account") as HTMLElement;
      this.btnDisconnect = document.getElementById(
        "btnDisconnect"
      ) as HTMLButtonElement;
    }
    public async init(): Promise<void> {
      this.user = await this.getUser();
      if (this.user.confirmed) {
        this.saveUser(this.user);
        this.displayAccount();
        this.disconnect();
      }
      console.log(this.user);
    }

    public disconnect() {
      this.btnDisconnect.addEventListener("click", () => {
        localStorage.removeItem("user");
        localStorage.removeItem("jwt");
        window.location.href = "/";
      });
    }

    private saveUser(user: User) {
      localStorage.setItem("user", JSON.stringify(user));
    }

    private displayAccount() {
      const user = this.user;
      const html = `
        <div class="flex items-center gap-5 text-primary dark:text-white">
          <img src="${IMAGES_URL}${user.avatar?.formats.thumbnail.url}" alt="${user.username}" class="rounded-full h-40 w-40"/>
          <section>
            <p class="fontblack text-xl">Username: ${user.username}</p>
          </section>
        </div>
      `;
      this.accountEl.innerHTML = html;
    }

    private getUser(): User | PromiseLike<User> {
      const userLocalStorage = localStorage.getItem("user");
      const jwtLocalStorage = localStorage.getItem("jwt");
      if (!userLocalStorage && !jwtLocalStorage) {
        throw new Error("No user in local storage");
      } else {
        // return JSON.parse(userLocalStorage);
        console.log(jwtLocalStorage);
        const headers = {
          "Content-Type": "application/json",
          Authorization: `Bearer ${jwtLocalStorage}`,
        };
        return fetch(
          `${API_URL}/users/me?populate[avatar][fields][0]=formats`,
          {
            headers,
          }
        )
          .then((response) => response.json())
          .then((data) => data);
      }
    }
  }

  const account = new Account();
  account.init();
</script>

<script>
  import { Gallery } from "@classes/gallery";
  import { User } from "@classes/user";

  export const user = new User();
  const userId = user.getUserId();

  export const loader = new Gallery(undefined, userId);
  loader.init();
</script>
